1.Encapsulation: Practice creating a class with private attributes and public getter/setter methods..

class Main {
    public static void main(String[] args) {
        Vendor vendor=new Vendor();
        vendor.setFVendor("up");
        vendor.setSVendor("doo");
        String fvendor=vendor.getFastVendor();
        System.out.println(fvendor);
        String svendor=vendor.getSlowVendor();
        System.out.println(svendor);
        }
}
class Vendor{
    private String FastVendor;
    private String SlowVendor;
    
    public String getFastVendor(){
        return FastVendor;
    }
    public String getSlowVendor(){
        return SlowVendor;
    }
    public void setFVendor(String FastVendor){
        this.FastVendor=FastVendor;
    }
    public void setSVendor(String SlowVendor){
        this.SlowVendor=SlowVendor;
    }
}
2.Inheritance & Polymorphism: Write a base Vendor class and create two subclasses like FastVendor and SlowVendor.
class Main {
    public static void main(String[] args) {
        // Polymorphism demonstration
        Vendor vendor1 = new FastVendor(); // Base class reference, subclass object
        vendor1.setCVendor("Jetix"); // Base class method
        System.out.println(vendor1.getCommVendor()); // Calls overridden method in FastVendor

        Vendor vendor2 = new SlowVendor(); // Base class reference, subclass object
        vendor2.setCVendor("Ebay"); // Base class method
        System.out.println(vendor2.getCommVendor()); // Calls overridden method in SlowVendor
    }
}

class Vendor {
    private String Commercial;
    private String Local;

    public String getCommVendor() {
        return "Generic Vendor: " + Commercial; // Default implementation
    }

    public String getLocalVendor() {
        return "Generic Vendor: " + Local; // Default implementation
    }

    public void setCVendor(String Commercial) {
        this.Commercial = Commercial;
    }

    public void setLVendor(String Local) {
        this.Local = Local;
    }
}

// Subclass FastVendor
class FastVendor extends Vendor {
    @Override
    public String getCommVendor() {
        return "FastVendor: " + super.getCommVendor(); // Override method
    }
}

// Subclass SlowVendor
class SlowVendor extends Vendor {
    @Override
    public String getCommVendor() {
        return "SlowVendor: " + super.getCommVendor(); // Override method
    }
}

3.Encapsulation: Practice creating a class with private attributes and public getter/setter methods.
Inheritance & Polymorphism: Write a base Vendor class and create two subclasses like FastVendor and SlowVendor.
Interfaces: Create a simple interface RetrievalStrategy and implement it with two classes.


class Main {
    public static void main(String[] args) {
        // Create a FastVendor
        FastVendor fastVendor = new FastVendor();
        fastVendor.setCommercialV("Jetix"); // Set commercial vendor name
        fastVendor.setLocalV("Keels"); // Set local vendor name

        // Create a SlowVendor
        SlowVendor slowVendor = new SlowVendor();
        slowVendor.setCommercialV("Ebay"); // Set commercial vendor name
        slowVendor.setLocalV("LocalMart"); // Set local vendor name

        // Print details using GetInfo interface
        System.out.println(fastVendor.getInfo());
        System.out.println(fastVendor.getCommercialV());
        System.out.println(fastVendor.getLocalV());

        System.out.println(slowVendor.getInfo());
        System.out.println(slowVendor.getCommercialV());
        System.out.println(slowVendor.getLocalV());
    }
}

interface GetInfo{
    return String getInfo();
}
class Vendor {
    private String CommercialV;
    private String LocalV;

    public String getCommercialV() {
        return "Commercial: " + CommercialV;
    }

    public String getLocalV() {
        return "Local: " + LocalV;
    }

    public void setCommercialV(String CommercialV) {
        this.CommercialV = CommercialV;
    }

    public void setLocalV(String LocalV) {
        this.LocalV = LocalV;
    }
}

class FastVendor extends Vendor implements GetInfo{
    @Override
    public String GetInfo(){
        return "Dis ones a fast Vendor";
    }
}
class SlowVendor extends Vendor implements GetInfo{
    @Override
    public String GetInfo(){
        return "Dis ones a slow Vendor";
    }
}

4.Write a simple producer-consumer program using synchronized methods or blocks and a shared Queue.

import.java.util.LinkedList;

class Main {
    public static void main(String[] args) {
      
    }
}

class TicketPool{
    private final List<String>TicketPool=new List<>();
    private final int capapcity;
    
    public capacity(int capacity){
        this.capacity=capacity;
    }
}
synchronized void producer(int item)throws InterruptedException{
    while(TicketPool.size()<=capacity){
        wait();
    }
    TicketPool.add(item);
    System.out.println("Produced: "+item);
    notifyAll();
} 
synchronized void consumer()throws InterruptedException{
    while(TicketPool.isEmpty()){
        wait();
    }
    TicketPool.remove(item);
    System.out.println("Consumed: "+item);
    notifyAll();
    return item;
}

Producer implements Runnable{
    
}














